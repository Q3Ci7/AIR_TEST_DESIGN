#include "key.h"
#include "usart.h"
static void EXTI_NVIC_Config(void)
{
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);           //配置中断分组
	/*配置   按键0 嵌套向量中断控制器NVIC*/
	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;         //*配置中断源选择 
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;              //*配置使能总中断
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;    //*配置抢占优先级0-1
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;           //*配置子优先级 0-7 
	NVIC_Init(&NVIC_InitStruct);
	
	/*配置中断源：  按键1    其他配置同上*/
	NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;           //*配置中断源选择
	NVIC_Init(&NVIC_InitStruct);
	/*配置中断源：  按键2    其他配置同上*/
	NVIC_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;           //*配置中断源选择
	NVIC_Init(&NVIC_InitStruct);
	/*配置中断源：  按键3    其他配置同上*/
	NVIC_InitStruct.NVIC_IRQChannel = EXTI9_5_IRQn;           //*配置中断源选择
	NVIC_Init(&NVIC_InitStruct);
}

void EXTI_Key_Config(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	
	//3、配置中断优先级
	EXTI_NVIC_Config();       //只能被该函数所调用
	//1、初始化GPIO
	RCC_APB2PeriphClockCmd(KEY0_INT_GPIO_CLK|KEY1_INT_GPIO_CLK|KEY2_INT_GPIO_CLK|KEY3_INT_GPIO_CLK|RCC_APB2Periph_AFIO, ENABLE);
	/*PB3、PB4，还有PA13-15这五个引脚不是普通的IO口，用作JTAG/SWD仿真器的调试接口,这些引脚只
	有重定义	功能后才能作为普通的IO口使用，所以我们需要对这些引脚进行配置的时候开启AFIO复用时钟。
	*/
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); //用PB3，PB4，PA15做普通IO	
	
	//PA15--Key0配置================================================================
	GPIO_InitStruct.GPIO_Pin = KEY0_INT_GPIO_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(KEY0_INT_GPIO_PORT, &GPIO_InitStruct);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource15);  //输入线
	
	EXTI_InitStruct.EXTI_Line = EXTI_Line15;                     //外部中断线选择
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;                       //使能中断屏蔽寄存器
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;             //模式
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;          //触发选择 -- 下降沿触发
	EXTI_Init(&EXTI_InitStruct);                         				 //调用函数将结构体成员写入相应寄存器	
	
	
	//PB3--Key1配置================================================================
	GPIO_InitStruct.GPIO_Pin = KEY1_INT_GPIO_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(KEY1_INT_GPIO_PORT, &GPIO_InitStruct);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource3);   //输入线 -- 将相应的GPIO引脚连到相应的中断线上
	
	EXTI_InitStruct.EXTI_Line = EXTI_Line3;                      //外部中断线选择
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;                       //使能中断屏蔽寄存器
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;             //模式
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;         //触发选择 -- 下降沿触发
	EXTI_Init(&EXTI_InitStruct);                         				 //调用函数将结构体成员写入相应寄存器	
	
	//PB4--Key2配置================================================================
	GPIO_InitStruct.GPIO_Pin = KEY2_INT_GPIO_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(KEY2_INT_GPIO_PORT, &GPIO_InitStruct);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource4);   //输入线 -- 将相应的GPIO引脚连到相应的中断线上
	
	EXTI_InitStruct.EXTI_Line = EXTI_Line4;                      //外部中断线选择
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;                       //使能中断屏蔽寄存器
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;             //模式
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;         //触发选择 -- 下降沿触发
	EXTI_Init(&EXTI_InitStruct);                         				 //调用函数将结构体成员写入相应寄存器		
	
	//PB5--Key3配置================================================================
	GPIO_InitStruct.GPIO_Pin = KEY3_INT_GPIO_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(KEY3_INT_GPIO_PORT, &GPIO_InitStruct);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource5);   //输入线 -- 将相应的GPIO引脚连到相应的中断线上
	
	EXTI_InitStruct.EXTI_Line = EXTI_Line5;                      //外部中断线选择
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;                       //使能中断屏蔽寄存器
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;             //模式
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;         //触发选择 -- 下降沿触发
	EXTI_Init(&EXTI_InitStruct);                         				 //调用函数将结构体成员写入相应寄存器		
}

/*
*********************************************************
*								
*									按键外部中断服务函数
*
*********************************************************
*/
void EXTI15_10_IRQHandler(void)
{
	if(EXTI_GetITStatus(EXTI_Line15) != RESET)
	{
		printf("0\r\n");
	}
	EXTI_ClearITPendingBit(EXTI_Line15);	
}

void EXTI3_IRQHandler(void)
{
	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
	{
		printf("1\r\n");
	}
	EXTI_ClearITPendingBit(EXTI_Line3);	
}

void EXTI4_IRQHandler(void)
{
	if(EXTI_GetITStatus(EXTI_Line4) != RESET)
	{
		printf("2\r\n");
	}
	EXTI_ClearITPendingBit(EXTI_Line4);	
}

void EXTI9_5_IRQHandler(void)
{ 
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
	{
		printf("3\r\n");
	}
	EXTI_ClearITPendingBit(EXTI_Line5);
}


