#include "sys.h"

/**************************************************************************/
extern char Timestr[100]; // 时间字符串
extern char RxBuffer[100], RxCounter;
extern uint8_t SendBuff[SENDBUFF_SIZE];

u8 string[10] = {0}; //字符串数组变量
u8 cl = 0,cl3 = 0;//清屏标志位
u8 temp, humi; // 温湿度参数
short temp_ds;//ds18b20温度参数
float ppm;                         // 气体浓度参数
float p_CO;                        //CO浓度参数
//u8 p_ze08;                      //甲醛浓度(ppb)
float p_ze08=0.01;                   //甲醛浓度(ppm)

u8 mode = 0;                       // 模式标志位
s8 menu_flag = 0,                  // 菜单标志位
    Set_flag = 0,                  // 阈值设置标志位
    flag = 1;                      // 按键确定标志位
s16 param_t = 25,                  // 温度阈值参数
   param_h = 70;                  // 湿度阈值参数
s16 param_p = 300;                 // 气体浓度阈值参数
float  param_z;              //甲醛浓度阈值参数

extern u8 flag_usart3,             //串口3中断标志位
         buff_usart3[9];           //串口3接收缓冲数组变量
/**************************************************************************/

void TimeSow(void);
void ValueSet(void);
void Menushow(void);
void DATA_GET(void);
void Compare_param(void);
void OPEN_Show(void);

int main(void)
{
    delay_init(); // 延时函数初始化
    ADCInit();    // ADC初始化
    Led_GPIO_Config();//LED IO口配置
		Buzzer_GPIO_Config();
    RELAY_GPIO_Config();//继电器 IO口配置	

    OLED_Init(); // OLED初始化
    OLED_DisplayTurn(0);//屏幕旋转180度
    OLED_ColorTurn(0);//反显函数

    EXTI_Key_Config();    // 按键初始化
    NVIC_Configuration(); // 设置NVIC中断分组2:2位抢占优先级，2位响应优先级	 
    uart_init(9600);      // 串口1初始化，可连接PC进行打印模块返回数据   PA9、PA10
    uart2_init(9600);     // 初始化和GPRS连接串口  PA2、PA3
    delay_ms(500);
    OPEN_Show();
    while (1)
    {
        DATA_GET();
        if (mode == 0)
        {
            Menushow();
        }
        else if (mode == 1)
        {
            TimeSow();
        }
        else if (mode == 2)
        {
            ValueSet();
        }
				Compare_param();
		  SendMessage(temp,humi,ppm);			                                                                  
    }
}

void OPEN_Show(void) // 开机展示
{
    //--------空气质量检测系统--------
    OLED_ShowChinese(0, 0, 0, 16, 1);
    OLED_ShowChinese(16, 0, 1, 16, 1);
    OLED_ShowChinese(32, 0, 2, 16, 1);
    OLED_ShowChinese(48, 0, 3, 16, 1);
    OLED_ShowChinese(64, 0, 4, 16, 1);
    OLED_ShowChinese(80, 0, 5, 16, 1);
    OLED_ShowChinese(96, 0, 6, 16, 1);
    OLED_ShowChinese(112, 0, 7, 16, 1);
    //--------------------------------
     OLED_Refresh();
     AT_Init(); // 模块初始化
     OLED_ShowString(0, 20, "AT init OK", 16, 1);
     OLED_Refresh();
     MQTT_Init(); // MQTT初始化
     OLED_ShowString(0, 40, "MQTT init OK", 16, 1);
     OLED_Refresh();
     delay_ms(500);
    OLED_Clear(); // 清屏
    OLED_Refresh();
}

void TimeSow(void) // 数据实时显示函数
{
    if (cl == 1)
    {
        OLED_Clear(); // 清屏
        cl = 0;
    }
    OLED_ShowChinese(32, 0, 21, 16, 1); // 实时检测
    OLED_ShowChinese(48, 0, 22, 16, 1);
    OLED_ShowChinese(64, 0, 23, 16, 1);
    OLED_ShowChinese(80, 0, 24, 16, 1);
    //--------温度:湿度:气体浓度:--------
    OLED_ShowString(0, 17, "Temp:", 12, 1); //%
    OLED_ShowString(43, 17, "`C;",12, 1); //

    OLED_ShowString(72, 17, "Humi:", 12, 1); //%
    OLED_ShowString(121, 17, "%", 12, 1); //%

    OLED_ShowString(0, 28, "GCC:", 12, 1); //%

    OLED_ShowString(0, 39, "CH2O:", 12, 1); //%
		
		OLED_ShowString(0, 49, "CO:", 12, 1); //%
    

    sprintf((char *)string, "%d", temp); // 将浮点数转换为字符
    OLED_ShowString(30, 17, string, 12, 1);
//		OLED_ShowNum(30,17,temp/10,2,12,1);

    sprintf((char *)string, "%d", humi); // 将浮点数转换为字符
    OLED_ShowString(102, 17, string, 12, 1);

    sprintf((char *)string, "%0.2f PPM        ", ppm);
    OLED_ShowString(25, 28, string, 12, 1);

    sprintf((char *)string, "%0.2f PPM        ", p_ze08);
    OLED_ShowString(30, 39, string, 12, 1);
		
		sprintf((char *)string, "%0.2f PPM        ", p_CO);
    OLED_ShowString(30, 49, string, 12, 1);
    OLED_Refresh();
}

void ValueSet(void) // 阈值设置函数
{
		/*阈值设置*/
		OLED_ShowChinese(32, 0, 15, 16, 1);
		OLED_ShowChinese(48, 0, 16, 16, 1);
		OLED_ShowChinese(64, 0, 17, 16, 1);
		OLED_ShowChinese(80, 0, 18, 16, 1);	
    if (cl == 1)
    {
        OLED_Clear(); // 清屏
        cl = 0;
    }
		if(Set_flag!=3)
		{
			if(cl3==1)
			{
				OLED_Clear();
				cl3=0;
			}
			OLED_ShowString(0, 18, "Temp:", 16, 1);
			OLED_ShowString(0, 34, "Humi:", 16, 1);
			OLED_ShowString(0, 50, "GCC:", 16, 1);
			OLED_Refresh();

			if (Set_flag == 0)
			{
					OLED_ShowString(119, 48, " ", 16, 1);
					OLED_ShowString(119, 32, " ", 16, 1);
					OLED_ShowString(119, 16, "<", 16, 1);
			}
			else if (Set_flag == 1)
			{
					OLED_ShowString(119, 16, " ", 16, 1);
					OLED_ShowString(119, 48, " ", 16, 1);
					OLED_ShowString(119, 32, "<", 16, 1);
			}
			else if (Set_flag == 2)
			{
					OLED_ShowString(119, 32, " ", 16, 1);
					OLED_ShowString(119, 16, " ", 16, 1);
					OLED_ShowString(119, 48, "<", 16, 1);
			}
			sprintf((char *)string, "%2d", param_t); // 将浮点数转换为字符
			OLED_ShowString(102, 16, string, 16, 1);

			sprintf((char *)string, "%2d", param_h); // 将浮点数转换为字符
			OLED_ShowString(102, 32, string, 16, 1);

			sprintf((char *)string, "%3d", param_p);
			OLED_ShowString(94, 48, string, 16, 1);
			OLED_Refresh();			
		}

		else if(Set_flag == 3)
		{
			if(cl3==1)
			{
				OLED_Clear();
				cl3=0;
			}
			OLED_ShowString(0, 18, "CH2O:", 16, 1);			 
      OLED_ShowString(119, 16, "<", 16, 1);
			sprintf((char *)string, "%0.1f", param_z);
			OLED_ShowString(95, 16, string, 16, 1);
			OLED_Refresh();
		}
}

void Menushow(void) // 主菜单栏显示
{
    if (cl == 1)
    {
        OLED_Clear(); // 清屏
        cl = 0;
    }
    /*菜单界面*/
    OLED_ShowChinese(48, 0, 19, 16, 1); // 菜
    OLED_ShowChinese(64, 0, 20, 16, 1); // 单

    OLED_ShowChinese(0, 18, 21, 16, 1); // 实时检测
    OLED_ShowChinese(16, 18, 22, 16, 1);
    OLED_ShowChinese(32, 18, 23, 16, 1);
    OLED_ShowChinese(48, 18, 24, 16, 1);

    OLED_ShowChinese(0, 34, 15, 16, 1); // 阈值设置
    OLED_ShowChinese(16, 34, 16, 16, 1);
    OLED_ShowChinese(32, 34, 17, 16, 1);
    OLED_ShowChinese(48, 34, 18, 16, 1);
    OLED_Refresh();
    if (menu_flag == 0)
    {
        OLED_ShowString(119, 34, " ", 16, 1);
        OLED_ShowString(119, 18, "<", 16, 1);
        OLED_Refresh();
    }
    else if (menu_flag == 1)
    {
        OLED_ShowString(119, 18, " ", 16, 1);
        OLED_ShowString(119, 34, "<", 16, 1);
        OLED_Refresh();
    }
}

void DATA_GET(void) // 获取各参数值
{
	ppm = Read_Mq135_Data();//获取气体浓度值
	p_CO = Read_Mq7_Data();
  DHT11_Read_Data(&temp, &humi);//采集湿度
// temp_ds = DS18B20_Get_Temp();//采集温度
   delay_ms(50);

}

void Compare_param(void) // 比较阈值继电器控制
{
    if((temp > param_t)||(humi > param_h)||(ppm > param_p)) 
    {
        LED0_TOGGLE;
				BUZZER_TOGGLE;
    }
    else
		{
			  LED0(0);
				GPIO_ResetBits(BUZZER_GPIO_PORT,BUZZER_GPIO_PIN);
		}
	
//	if(strstr((const char*)RxBuffer,"1"))
//	{
//		Clear_Buffer();
//		LED0(1);
//	}
//	if(strstr((const char*)RxBuffer,"0"))
//	{
//		Clear_Buffer();
//		LED0(0);
//	} 

}


